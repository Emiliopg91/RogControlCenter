#!/usr/bin/env bash
# generate_flamegraph.sh
# Uso: sudo ./generate_flamegraph.sh <PID|process_name> <dur_secs>
set -euo pipefail

if [ "$#" -lt 2 ]; then
  echo "Uso: $0 <PID|process_name> <dur_secs>"
  exit 2
fi

TARGET=$1
DUR=${2}

# Si se pasó un nombre de proceso, extrae un PID
if [[ "$TARGET" =~ ^[0-9]+$ ]]; then
  PID=$TARGET
else
  PID=$(pidof "$TARGET" | awk '{print $1}')
  if [ -z "$PID" ]; then
    echo "No pude encontrar PID para proceso '$TARGET'"
    exit 3
  fi
fi

echo "PID elegido: $PID (duración: ${DUR}s)"

# Guardar valores previos y restaurar al salir
ORIG_KPTR=$(cat /proc/sys/kernel/kptr_restrict 2>/dev/null || echo "")
ORIG_PARANOID=$(cat /proc/sys/kernel/perf_event_paranoid 2>/dev/null || echo "")

cleanup() {
  echo "Restaurando sysctl..."
  if [ -n "$ORIG_KPTR" ]; then
    echo "$ORIG_KPTR" > /proc/sys/kernel/kptr_restrict
  fi
  if [ -n "$ORIG_PARANOID" ]; then
    echo "$ORIG_PARANOID" > /proc/sys/kernel/perf_event_paranoid
  fi
}
trap cleanup EXIT

# Relajar temporalmente restricciones para obtener símbolos del kernel/vmlinux si podemos
echo "Intentando relajar restricciones del kernel (solo mientras dure el script)..."
echo 0 > /proc/sys/kernel/kptr_restrict || echo "No se pudo escribir kernel.kptr_restrict (puede que ya esté en 0 o permisos insuf.)."
echo -1 > /proc/sys/kernel/perf_event_paranoid || echo "No se pudo escribir kernel.perf_event_paranoid."

# Asegúrate de tener perf
if ! command -v perf >/dev/null 2>&1; then
  echo "ERROR: 'perf' no está instalado o no está en PATH."
  exit 4
fi

# Clonar FlameGraph si no existe en /tmp/FlameGraph (o en ./FlameGraph)
if [ -d "./FlameGraph" ]; then
  FG="./FlameGraph"
elif [ -d "/tmp/FlameGraph" ]; then
  FG="/tmp/FlameGraph"
else
  echo "Clonando FlameGraph en /tmp/FlameGraph..."
  git clone https://github.com/brendangregg/FlameGraph /tmp/FlameGraph
  FG="/tmp/FlameGraph"
fi

echo "Usando FlameGraph en: $FG"

OUTDIR="./flame_output_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$OUTDIR"
cd "$OUTDIR"

echo "Grabando perf (se generará perf.data). Esto muestreará durante ${DUR}s..."
# -F 99 frecuencia de muestreo (ajústala si quieres), -g y --call-graph dwarf para backtraces exactas
sudo perf record -F 99 -p "$PID" -g --call-graph dwarf -- sleep "$DUR"

echo "Generando stacks con perf script..."
sudo perf script > perf.unfold

echo "Colapsando stacks y generando flamegraph..."
"$FG/stackcollapse-perf.pl" perf.unfold > out.folded
"$FG/flamegraph.pl" --width 1200 out.folded > flame.svg

echo "Hecho. Archivo: $(pwd)/flame.svg"
echo "Puedes abrirlo con: xdg-open flame.svg  (o abrirlo en tu navegador)"
