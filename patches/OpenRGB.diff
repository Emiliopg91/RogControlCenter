diff --git a/Dockerfile b/Dockerfile
index b0a17604..e75875d9 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,10 +1,9 @@
-# Use a base image with the required development tools
 FROM ubuntu:22.04
 
 ARG DEBIAN_FRONTEND=noninteractive
 
 # Install essential packages and dependencies
-RUN apt-get update && apt-get install -y \
+RUN apt-get update && apt-get install --no-install-recommends -y \
     git \
     build-essential \
     qtcreator \
@@ -20,7 +19,8 @@ RUN apt-get update && apt-get install -y \
     && rm -rf /var/lib/apt/lists/*
 
 # Set the default command to clone, build, and copy the binary
-CMD ["/bin/bash", "-c", "\
+CMD bash -c "\
     cd /input/build && \
+    export QMAKE_MAKEFLAGS=\"-j$(nproc)\" && \
     qmake ../OpenRGB.pro && \
-    make -j$(nproc)"]
+    make -j$(nproc)"
diff --git a/OpenRGB.pro b/OpenRGB.pro
index 3d938d61..46a92cef 100644
--- a/OpenRGB.pro
+++ b/OpenRGB.pro
@@ -524,7 +524,8 @@ contains(QMAKE_PLATFORM, linux) {
 
     QT += dbus
 
-    QMAKE_CXXFLAGS += -Wno-implicit-fallthrough -Wno-psabi
+    QMAKE_CXXFLAGS += -Wno-implicit-fallthrough -Wno-psabi -Wno-unused-parameter -Wno-sign-compare -Wno-unused-variable -Wno-unused-result -Wno-class-memaccess -flto=auto
+    QMAKE_LFLAGS += -flto=auto
 
     #-------------------------------------------------------------------------------------------#
     # Determine which hidapi to use based on availability                                       #
diff --git a/build.sh b/build.sh
index ebc7370d..cb3ae6b3 100755
--- a/build.sh
+++ b/build.sh
@@ -6,4 +6,4 @@ if [ -f ./build/openrgb ]; then
     ./OpenRGB.AppImage --appimage-extract
     cp ./build/openrgb squashfs-root/usr/bin/OpenRGB
     ./appimagetool squashfs-root/ ./OpenRGB.AppImage
-fi
\ No newline at end of file
+fi
diff --git a/dependencies/NVFC/nvapi.cpp b/dependencies/NVFC/nvapi.cpp
index 632b2e08..3cf47262 100644
--- a/dependencies/NVFC/nvapi.cpp
+++ b/dependencies/NVFC/nvapi.cpp
@@ -268,7 +268,7 @@ static bool QueryInterfaceOpaque(nvapi_QueryInterface_t query_interface, NV_U32
 template<typename F>
 static void QueryInterfaceCast(nvapi_QueryInterface_t query_interface, NV_U32 id, const char */*function_name*/, F &function_pointer)
 {
-	const bool result = QueryInterfaceOpaque(query_interface, id, (void **)&function_pointer);
+	QueryInterfaceOpaque(query_interface, id, (void **)&function_pointer);
     ////Log::write("%s querying interface '0x%08x' '%s'", result ? "success" : "failure", id, function_name);
 }
 
diff --git a/scsiapi/scsiapi_linux.c b/scsiapi/scsiapi_linux.c
index cd226104..835c76b6 100644
--- a/scsiapi/scsiapi_linux.c
+++ b/scsiapi/scsiapi_linux.c
@@ -81,7 +81,7 @@ struct scsi_device_info * scsi_enumerate(const char * vendor, const char * produ
         /*-------------------------------------------------*\
         | Read the model string and close the model file    |
         \*-------------------------------------------------*/
-        read(sg_model_fd, sg_model_buf, 512);
+        ssize_t ret1 = read(sg_model_fd, sg_model_buf, 512);
         close(sg_model_fd);
 
         for(unsigned int i = 0; i < strlen(sg_model_buf); i++)
@@ -96,7 +96,7 @@ struct scsi_device_info * scsi_enumerate(const char * vendor, const char * produ
         /*-------------------------------------------------*\
         | Read the vendor string and close the vendor file  |
         \*-------------------------------------------------*/
-        read(sg_vendor_fd, sg_vendor_buf, 512);
+        ssize_t ret2 = read(sg_vendor_fd, sg_vendor_buf, 512);
         close(sg_vendor_fd);
 
         for(unsigned int i = 0; i < strlen(sg_vendor_buf); i++)
