name: Release production build

on:
  push:
    branches:
      - main

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - name: Change directory
        run: |
          mkdir src
          cd src

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install project
        run: pnpm i

      - name: Extract version from package.json
        id: extract_version
        run: |
          VERSION=$(cat ./package.json | jq -r .version)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Build and package binaries
        run: |
          pnpm build:unpack
          mv dist/linux-unpacked/ ../RogControlCenter
          cd ..
          tar -czf binaries-${{ env.version }}.tar.gz RogControlCenter/

      - name: Generate AppImage
        id: generate-appimage-file
        uses: Emiliopg91/AppImage-Creator@latest

      - name: Create GitHub Release
        id: create_release
        if: env.IS_UPDATE == 'true'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: ${{ env.version }}
          automatic_release_tag: ${{ env.version }}
          prerelease: false
          files: |
            binaries-${{ env.APP_VERSION }}.tar.gz
            ${{ env.APPIMAGE_PATH }}
            ${{ env.APPIMAGE_PATH }}.zsync

          repo_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and prepare for next iteration
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTION_PAT }}
        run: |
          cd src
          VERSION=${{ env.version }}
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git tag "$VERSION"
          git push origin "$VERSION"
          NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."($3+1)}')
          echo "Updating version from $VERSION to $NEW_VERSION"
          jq --arg new_version "$NEW_VERSION" '.version = $new_version' package.json > package.tmp.json
          mv package.tmp.json package.json
          git add -u
          git reset -- .github/workflows/main.yml
          git commit -m "[ci skip] Prepare for next development iteration"
          git push origin main
          git fetch
          git checkout --force develop
          git reset --hard main
          git push --force
